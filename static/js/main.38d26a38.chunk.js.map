{"version":3,"sources":["Quote.js","QuoteCard.js","App.js","serviceWorker.js","index.js"],"names":["Quote","props","quote","author","email","date","generateQuote","shareQuote","react_default","a","createElement","className","onClick","QuoteCard","deleteQuote","key","src","alt","App","state","name","Date","now","generatedQuotes","randomNum","Math","floor","random","fetch","concat","toString","then","res","json","data","_this","setState","body","Object","toConsumableArray","window","open","i","length","newQuotes","splice","this","_this2","src_Quote","map","item","src_QuoteCard","class","href","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.38d26a38.chunk.js","sourcesContent":["/* eslint-disable react/require-default-props */\r\n/* eslint-disable react/button-has-type */\r\n/* eslint-disable react/jsx-filename-extension */\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Quote = (props) => {\r\n  const {\r\n    quote, author, email, date, generateQuote, shareQuote,\r\n  } = props;\r\n  return (\r\n    <div className=\"box\">\r\n      <p>\r\n        <strong>Quote:</strong>\r\n        {' '}\r\n        {quote}\r\n      </p>\r\n      <p>\r\n        <strong>Author:</strong>\r\n        {' '}\r\n        {author}\r\n      </p>\r\n      <p>\r\n        <strong>Email:</strong>\r\n        {' '}\r\n        {email}\r\n      </p>\r\n      <p>\r\n        <strong>Date:</strong>\r\n        {' '}\r\n        {date}\r\n      </p>\r\n      <br />\r\n      <div className=\"buttons\">\r\n        <button className=\"button is-primary is-small\" onClick={generateQuote}>New Quote</button>\r\n        <button className=\"button is-success is-small\" onClick={shareQuote}>Tweet Quote</button>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nQuote.propTypes = {\r\n  quote: PropTypes.string,\r\n  author: PropTypes.string,\r\n  email: PropTypes.string,\r\n  date: PropTypes.string,\r\n  generateQuote: PropTypes.func,\r\n  shareQuote: PropTypes.func,\r\n};\r\n\r\nexport default Quote;\r\n","/* eslint-disable react/button-has-type */\r\n/* eslint-disable react/jsx-filename-extension */\r\n/* eslint-disable react/require-default-props */\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst QuoteCard = (props) => {\r\n  const {\r\n    author, email, date, quote, shareQuote, deleteQuote,\r\n  } = props;\r\n  return (\r\n    <div className=\"box\" key={date}>\r\n      <article className=\"media\">\r\n        <div className=\"media-left\">\r\n          <figure className=\"image is-128x128\">\r\n            <img src=\"https://bulma.io/images/placeholders/128x128.png\" alt=\"Mock\" />\r\n          </figure>\r\n        </div>\r\n        <div className=\"media-content\">\r\n          <div className=\"content\">\r\n            <p>\r\n              <strong>{author}</strong>\r\n              <small>{email}</small>\r\n              <br />\r\n              <small><em>{date}</em></small>\r\n              <br />\r\n              {quote}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </article>\r\n      <br />\r\n      <div className=\"buttons\">\r\n        <button className=\"button is-success is-small\" onClick={shareQuote}>Tweet Quote</button>\r\n        <button className=\"button is-danger is-small\" onClick={deleteQuote}>Delete Quote</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nQuoteCard.propTypes = {\r\n  quote: PropTypes.string,\r\n  author: PropTypes.string,\r\n  email: PropTypes.string,\r\n  date: PropTypes.string,\r\n  deleteQuote: PropTypes.func,\r\n  shareQuote: PropTypes.func,\r\n};\r\n\r\nexport default QuoteCard;\r\n","import React, { Component } from 'react';\r\nimport Quote from './Quote';\r\nimport QuoteCard from './QuoteCard';\r\nimport './App.css';\r\n\r\n\r\n// https://randomstoicquotesapi.herokuapp.com/api/v1/quotes\r\n\r\nclass App extends Component {\r\n  state = { \r\n      quote: 'Hello World',\r\n      name: 'Me',\r\n      email: 'foo@bar.com',\r\n      date: Date(Date.now()),\r\n      generatedQuotes: []\r\n     }\r\n\r\n  componentDidMount() {\r\n    this.generateQuote()\r\n  }\r\n  \r\n  generateQuote = () => {\r\n    const randomNum = Math.floor(Math.random() * (500 - 1)) + 1;\r\n    fetch(`https://jsonplaceholder.typicode.com/comments?id=${randomNum.toString()}`)\r\n    .then(res => res.json())\r\n    .then(data => this.setState({\r\n      quote: data[0].body,\r\n      name: data[0].name,\r\n      email: data[0].email,\r\n      date: Date(Date.now()),\r\n      generatedQuotes: \r\n        [...this.state.generatedQuotes, { \r\n          quote: data[0].body,\r\n          name: data[0].name,\r\n          email: data[0].email,\r\n          date: Date(Date.now()) }\r\n        ]\r\n    }));\r\n  }\r\n\r\n  shareQuote = () => {\r\n    window.open( `https://twitter.com/intent/tweet?text=${this.state.quote} Quote by: ${this.state.name}`);\r\n  }\r\n\r\n  deleteQuote = (i) => {\r\n    if (this.state.generatedQuotes.length !== -1 ){\r\n     let newQuotes = this.state.generatedQuotes;\r\n     newQuotes.splice(i, 1);\r\n     this.setState({\r\n      generatedQuotes: newQuotes\r\n     })\r\n    }\r\n    \r\n  }\r\n\r\n  render() { \r\n    return ( \r\n      <section className=\"section\">\r\n      <div className=\"container\">\r\n        <div className=\"columns\">\r\n        <div className=\"column is-half is-offset-one-quarter\">\r\n        <h1 className=\"is-size-3 has-text-centered\">Random Quote Generator</h1>\r\n        <br />\r\n        <Quote \r\n          quote={this.state.quote} \r\n          author={this.state.name} \r\n          email={this.state.email} \r\n          date={this.state.date} \r\n          generateQuote={this.generateQuote}\r\n          shareQuote={this.shareQuote}\r\n          />\r\n        </div>\r\n        </div>\r\n        <h1 className=\"is-size-4 has-text-centered\">Recent Quotes</h1>\r\n        <br/>\r\n        <div className=\"columns is-multiline\">\r\n        \r\n          {this.state.generatedQuotes.map((item, i) => \r\n                <div className=\"column is-half\" key={i}>\r\n                <QuoteCard\r\n                  author={item.author} \r\n                  quote={item.quote} \r\n                  email={item.email} \r\n                  date={item.date}\r\n                  deleteQuote={() => this.deleteQuote(i)}\r\n                  shareQuote={this.shareQuote}\r\n                />\r\n                </div>\r\n          )}\r\n        </div>\r\n        <footer class=\"footer\">\r\n  <div class=\"content has-text-centered\">\r\n    <p>\r\n      <strong>Random Quote Generator</strong> by <a href=\"https://github.com/fendermaniac\">Joe LoPresti</a>. \r\n    </p>\r\n  </div>\r\n</footer>\r\n      </div>\r\n      </section> \r\n\r\n     );\r\n  }\r\n}\r\n \r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css'\r\nimport 'bulma/css/bulma.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}